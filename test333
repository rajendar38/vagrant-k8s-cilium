import yaml
import json
from collections import defaultdict

def load_yaml(file_path):
    with open(file_path, 'r') as file:
        return yaml.safe_load(file)

def load_json(file_path):
    with open(file_path, 'r') as file:
        content = file.read()
        # Fix common JSON issues
        content = content.replace(",\n]", "\n]").replace(",\n}", "\n}")
        return json.loads(content)

def get_env_type(namespace):
    """Determine environment from namespace"""
    if 'prod' in namespace.lower():
        return 'PROD'
    elif 'uat' in namespace.lower():
        return 'UAT'
    elif 'it' in namespace.lower():
        return 'IT'
    elif 'perf' in namespace.lower():
        return 'PERF'
    elif 'emp' in namespace.lower():
        return 'EMP'
    return None

def convert_to_pattern(namespace, env_type):
    """Convert actual namespace to the required pattern format"""
    if env_type == 'PROD':
        return namespace.replace('prod', '{SHIELD_ENV}')
    elif env_type == 'IT':
        if 'acctsve3' in namespace:
            base = namespace.split('-IT')[0]
            return f"{base}-{{SHIELD_ENV}}{{ENV_INDEX}}"
        else:
            base = '-'.join(namespace.split('-')[:-1])
            return f"{base}e3-{{SHIELD_ENV}}{{ENV_INDEX}}"
    elif env_type in ('UAT', 'PERF', 'EMP'):
        base = '-'.join(namespace.split('-')[:-1])
        return f"{base}-{{SHIELD_ENV}}{{ENV_INDEX}}"
    return namespace

def process_data():
    # 1. Load app structure from test.yaml
    try:
        test_data = load_json('test.yaml')
    except Exception as e:
        print(f"Error loading test.yaml: {e}")
        return None

    # 2. Load all deployment files
    deployment_files = ['prod.yaml', 'it1.yaml', 'uat1.yaml']  # Add others as needed
    deployments = []
    for file in deployment_files:
        try:
            deployments.append(load_yaml(file))
        except Exception as e:
            print(f"Warning: Couldn't load {file}: {e}")

    # 3. Build namespace pattern mapping
    app_pattern_map = defaultdict(lambda: defaultdict(lambda: defaultdict(list)))

    for deployment in deployments:
        if not deployment:
            continue
        
        namespace = deployment['metadata']['namespace']
        env_type = get_env_type(namespace)
        if not env_type:
            continue
        
        # Get app name from template labels
        app_name = deployment['spec']['template']['metadata']['labels'].get('name')
        if not app_name:
            continue

        # Convert to pattern
        pattern = convert_to_pattern(namespace, env_type)

        # Add to all categories that include this app
        for category, apps in test_data.items():
            if app_name in apps:
                if pattern not in app_pattern_map[app_name][category][env_type]:
                    app_pattern_map[app_name][category][env_type].append(pattern)

    return test_data, app_pattern_map

def generate_output(test_data, app_pattern_map):
    output = {}
    env_types = ['PROD', 'UAT', 'IT', 'PERF', 'EMP']  # All possible environments

    # For each app in test data
    for category, apps in test_data.items():
        for app in apps:
            if app not in output:
                output[app] = defaultdict(lambda: defaultdict(list))
            
            # For each category the app appears in
            for cat in test_data:
                if app in test_data[cat]:
                    # For each environment type
                    for env in env_types:
                        if env in app_pattern_map[app][cat]:
                            output[app][cat][env] = app_pattern_map[app][cat][env]
                        else:
                            output[app][cat][env] = [] if env in ['EMP', 'PERF'] else ["-"]

    # Write to YAML
    with open('output.yml', 'w') as file:
        yaml.dump(dict(output), file, default_flow_style=False, sort_keys=False, width=1000)

if __name__ == "__main__":
    test_data, pattern_map = process_data()
    if test_data and pattern_map:
        generate_output(test_data, pattern_map)
    print("Generated output.yml with namespace patterns")
