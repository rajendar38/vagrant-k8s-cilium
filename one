import re
import yaml
import logging

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

def update_yaml_with_namespaces(yaml_file_path, namespaces):
    logger.info(f"Updating YAML file with namespaces using regex: {yaml_file_path}")
    try:
        with open(yaml_file_path, 'r') as file:
            data = yaml.safe_load(file)

        # Regex pattern to match the service URL:
        # captures appname and namespace in groups:
        # e.g. http://appname.namespace.svc.cluster.local
        url_pattern = re.compile(
            r'(http://)([a-zA-Z0-9\-]+)\.([a-zA-Z0-9\-{}\(\)_]+)\.svc\.cluster\.local')

        def recursive_update(d):
            for key, value in d.items():
                if isinstance(value, dict):
                    recursive_update(value)
                elif isinstance(value, str) and ".svc.cluster.local" in value:
                    match = url_pattern.search(value)
                    if match:
                        scheme = match.group(1)
                        appname = match.group(2)
                        old_namespace = match.group(3)

                        if appname in namespaces and namespaces[appname]:
                            new_namespace = namespaces[appname][0]
                            new_url = value.replace(f"{appname}.{old_namespace}", f"{appname}.{new_namespace}")
                            logger.info(f"Updated URL for '{appname}':\n  Old: {value}\n  New: {new_url}")
                            d[key] = new_url
                        else:
                            logger.info(f"No namespace found for '{appname}'. Keeping URL unchanged.")
        
        recursive_update(data)

        with open(yaml_file_path, 'w') as file:
            yaml.safe_dump(data, file)

        logger.info("YAML update complete.")

    except Exception as e:
        logger.error(f"Failed to update YAML: {e}")
        raise
