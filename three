import yaml
import json
import re
import logging

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def extract_appnames_from_yaml(yaml_file_path):
    logger.info(f"Extracting appnames from YAML file: {yaml_file_path}")
    pattern = re.compile(r'https://([a-zA-Z0-9_-]+)\.[a-zA-Z0-9_-]+\.svs\.local\.cluster\.com')
    appnames = []

    try:
        with open(yaml_file_path, 'r') as file:
            data = yaml.safe_load(file)

        def recursive_search(d):
            for value in d.values():
                if isinstance(value, dict):
                    recursive_search(value)
                elif isinstance(value, str):
                    match = pattern.search(value)
                    if match:
                        appnames.append(match.group(1))

        recursive_search(data)
        logger.info(f"Extracted appnames: {appnames}")
    except Exception as e:
        logger.error(f"Error extracting appnames: {e}")
        raise

    return appnames

def find_app_ids_by_appnames(json_file_path, appnames):
    logger.info(f"Finding app IDs for appnames: {appnames} from JSON file: {json_file_path}")
    try:
        with open(json_file_path, 'r') as file:
            data = json.load(file)

        result = {}
        for appname in appnames:
            for app_id, configs in data.items():
                for config in configs:
                    if config.get("METTA_COMPONENT") == appname:
                        result[appname] = app_id
                        break
                if appname in result:
                    break
            if appname not in result:
                result[appname] = None
        logger.info(f"Found app IDs: {result}")
    except Exception as e:
        logger.error(f"Error finding app IDs: {e}")
        raise

    return result

def get_namespaces_for_app_ids(namespace_json_file, app_id_map, env, shield_env, env_index):
    logger.info(f"Getting namespaces for app IDs from file: {namespace_json_file}, environment: {env}")
    try:
        with open(namespace_json_file, 'r') as file:
            env_data = json.load(file)

        result = {}
        for appname, app_id in app_id_map.items():
            if app_id and app_id in env_data:
                raw_namespaces = env_data[app_id].get(env.upper(), [])
                # Replace placeholders in namespaces
                replaced_namespaces = [
                    ns.replace("{shield_env}", shield_env).replace("{env_index}", env_index)
                    for ns in raw_namespaces
                ]
                result[appname] = replaced_namespaces
                logger.info(f"Replaced namespaces for app '{appname}': {replaced_namespaces}")
            else:
                result[appname] = []
                logger.warning(f"No namespaces found for app '{appname}' in environment '{env}'")
    except Exception as e:
        logger.error(f"Error getting namespaces: {e}")
        raise

    return result

def update_yaml_with_namespaces(yaml_file_path, namespaces):
    logger.info(f"Updating YAML file with namespaces: {yaml_file_path}")
    try:
        with open(yaml_file_path, 'r') as file:
            data = yaml.safe_load(file)

        # Loop through the data and replace the URL values with the updated namespaces
        def recursive_update(d):
            for key, value in d.items():
                if isinstance(value, dict):
                    recursive_update(value)
                elif isinstance(value, str):
                    for appname, ns_list in namespaces.items():
                        if appname in value:
                            logger.info(f"Replacing '{appname}' in URL '{value}' with namespace '{ns_list[0]}'")
                            d[key] = value.replace(appname, ns_list[0])

        recursive_update(data)

        # Save the updated YAML back to the file
        with open(yaml_file_path, 'w') as file:
            yaml.safe_dump(data, file)
        logger.info(f"YAML file updated successfully.")
    except Exception as e:
        logger.error(f"Error updating YAML file: {e}")
        raise

# Main method to run the program
def main():
    yaml_file = "urls_config.yaml"
    app_mapping_file = "apps_config.json"
    namespace_file = "namespaces.json"
    env = "IT"
    shield_env = "int"        # example value
    env_index = "01"          # example value

    # Process
    try:
        appnames = extract_appnames_from_yaml(yaml_file)
        app_ids = find_app_ids_by_appnames(app_mapping_file, appnames)
        namespaces = get_namespaces_for_app_ids(namespace_file, app_ids, env, shield_env, env_index)

        # Update YAML with new namespaces
        update_yaml_with_namespaces(yaml_file, namespaces)

        logger.info("Process completed successfully.")
    except Exception as e:
        logger.error(f"Process failed: {e}")

# Run the main method
if __name__ == "__main__":
    main()
