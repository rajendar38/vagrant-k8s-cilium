import yaml
import json
import os
from collections import defaultdict

# --- CONFIGURATION ---

app_input_path = "input.json"  # JSON file with app categories
env_dirs = {
    "PROD": "deployments/prod",
    "UAT": "deployments/uat"
}
empty_envs = ["EMP", "PERF" ,"IT"]
output_path = "final_output.yaml"

# --- Load apps by category ---
with open(app_input_path, "r") as f:
    app_categories = json.load(f)

# --- Load all YAML deployments from a directory ---
def load_all_deployments_from_dir(dir_path):
    deployments = []
    if not os.path.exists(dir_path):
        return deployments

    for filename in os.listdir(dir_path):
        if filename.endswith(".yaml") or filename.endswith(".yml"):
            full_path = os.path.join(dir_path, filename)
            with open(full_path, "r") as f:
                try:
                    content = yaml.safe_load(f)
                    if isinstance(content, dict) and "items" in content:
                        deployments.extend(content["items"])
                    else:
                        deployments.extend(yaml.safe_load_all(f))
                except Exception as e:
                    print(f"Error parsing {filename}: {e}")
    return deployments

# --- Extract app match and namespace ---
def find_namespace_for_app(app_name, deployments):
    for deploy in deployments:
        try:
            meta = deploy.get("metadata", {})
            labels = meta.get("labels", {})
            template_labels = (
                deploy.get("spec", {})
                      .get("template", {})
                      .get("metadata", {})
                      .get("labels", {})
            )
            name_label = labels.get("name") or meta.get("name") or template_labels.get("name")
            if name_label == app_name:
                return meta.get("namespace")
        except Exception:
            continue
    return None

# --- Transform real namespace to placeholder ---
def get_placeholder_from_namespace(ns, env):
    if not ns:
        return None
    prefix_parts = ns.split("-")
    if len(prefix_parts) < 2:
        return f"{ns}-{{SHIELD_ENV}}" if env == "PROD" else f"{ns}-{{SHIELD_ENV}}-{{ENV_INDEX}}"
    base = "-".join(prefix_parts[:-1])
    if env == "PROD":
        return f"{base}-{{SHIELD_ENV}}"
    else:
        return f"{base}-{{SHIELD_ENV}}-{{ENV_INDEX}}"

# --- Load all deployments per environment ---
env_to_deployments = {
    env: load_all_deployments_from_dir(dir_path)
    for env, dir_path in env_dirs.items()
}

# --- Build full set of unique apps ---
all_apps = set()
for apps in app_categories.values():
    all_apps.update(apps)

# --- Ensure all categories are present ---
all_categories = {"customer", "banker", "branch"}

# --- Build final output structure ---
final_output = defaultdict(dict)

for app in all_apps:
    for category in all_categories:
        envs = {}

        for env, deployments in env_to_deployments.items():
            namespace = find_namespace_for_app(app, deployments)
            if namespace:
                placeholder = get_placeholder_from_namespace(namespace, env)
                envs[env] = [placeholder]
            else:
                envs[env] = []

        for env in empty_envs:
            envs[env] = []

        final_output[app][category] = envs

# --- Save final output ---
with open(output_path, "w") as f:
    yaml.dump(dict(final_output), f, sort_keys=False)

print(f"âœ… Final structured YAML written to: {output_path}")
