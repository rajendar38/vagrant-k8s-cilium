def update_yaml_with_namespaces(yaml_file_path, app_id_map, namespaces):
    logger.info(f"Updating YAML file: {yaml_file_path} using app ID mappings.")
    try:
        with open(yaml_file_path, 'r') as file:
            data = yaml.safe_load(file)

        # Regex to capture appname and namespace
        url_pattern = re.compile(
            r'(http://)([a-zA-Z0-9\-]+)\.([a-zA-Z0-9\-{}\(\)_]+)\.svc\.cluster\.local')

        def recursive_update(d):
            for key, value in d.items():
                if isinstance(value, dict):
                    recursive_update(value)
                elif isinstance(value, str) and ".svc.cluster.local" in value:
                    match = url_pattern.search(value)
                    if match:
                        scheme = match.group(1)
                        appname = match.group(2)
                        old_namespace = match.group(3)

                        # Lookup app ID for the given appname
                        app_id = app_id_map.get(appname)
                        if app_id:
                            # Lookup namespace
                            ns_list = namespaces.get(app_id)
                            if ns_list:
                                new_namespace = ns_list[0]
                                new_url = value.replace(f"{appname}.{old_namespace}", f"{appname}.{new_namespace}")
                                logger.info(f"Updated URL for '{appname}':\n  Old: {value}\n  New: {new_url}")
                                d[key] = new_url
                            else:
                                logger.info(f"No namespace found for app ID '{app_id}', keeping original URL.")
                        else:
                            logger.info(f"No app ID mapping found for appname '{appname}', keeping original URL.")

        recursive_update(data)

        with open(yaml_file_path, 'w') as file:
            yaml.safe_dump(data, file)

        logger.info("YAML update complete.")

    except Exception as e:
        logger.error(f"Error updating YAML: {e}")
        raise



def build_app_id_map(metadata_file_path):
    with open(metadata_file_path, 'r') as f:
        metadata = json.load(f)
    
    app_id_map = {}
    for app_id, configs in metadata.items():
        for config in configs:
            metta_component = config.get("METTA_COMPONENT")
            if metta_component:
                app_id_map[metta_component] = app_id
    return app_id_map
